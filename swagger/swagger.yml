swagger: "2.0"
info:
  title: API's for Lagos State SME Hub
  description: This is developed using Beego, and should be consumed by only developers
    in GPI
  version: 1.0.0
  termsOfService: http://my-gpi.io/
  contact:
    email: endy.apina@my-gpi.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /admin/:
    get:
      tags:
      - admin
      description: get all Industry in the database
      operationId: AdminController.GetAll
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.ResponseObject'
  /admin/sub/:
    get:
      tags:
      - admin
      description: get all Sub Admins
      operationId: AdminController.AllSubAdmins
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.ResponseObject'
    post:
      tags:
      - admin
      description: Create more sub Admins .
      operationId: AdminController.SubAdmin
      parameters:
      - in: body
        name: body
        description: body for admin content
        required: true
        schema:
          $ref: '#/definitions/models.APIData'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ResponsePackage'
        "403":
          description: body is empty
  /admin/sup/:
    get:
      tags:
      - admin
      description: Get all Super Administrative users
      operationId: AdminController.GetSupAdmin
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    post:
      tags:
      - admin
      description: Create more super administrative users.
      operationId: AdminController.CreateAdmin
      parameters:
      - in: body
        name: body
        description: body for admin content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ResponsePackage'
        "403":
          description: body is empty
  /object/:
    get:
      tags:
      - object
      description: get all objects
      operationId: ObjectController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    post:
      tags:
      - object
      description: create object
      operationId: ObjectController.Create
      parameters:
      - in: body
        name: body
        description: The object content
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: '{string} models.Object.Id'
        "403":
          description: body is empty
  /object/{objectId}:
    get:
      tags:
      - object
      description: find object by objectid
      operationId: ObjectController.Get
      parameters:
      - in: path
        name: objectId
        description: the objectid you want to get
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    put:
      tags:
      - object
      description: update the object
      operationId: ObjectController.Update
      parameters:
      - in: path
        name: objectId
        description: The objectid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: The body
        required: true
        schema:
          $ref: '#/definitions/models.Object'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Object'
        "403":
          description: :objectId is empty
    delete:
      tags:
      - object
      description: delete the object
      operationId: ObjectController.Delete
      parameters:
      - in: path
        name: objectId
        description: The objectId you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: objectId is empty
  /user/:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetAll
      responses:
        "200":
          description: ""
          schema:
            type: array
            items:
              $ref: '#/definitions/models.User'
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ResponsePackage'
        "403":
          description: body is empty
  /user/{uid}:
    get:
      tags:
      - user
      description: get user by uid
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ResponsePackage'
        "403":
          description: :uid is empty
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ResponsePackage'
        "403":
          description: :uid is not int
    delete:
      tags:
      - user
      description: delete the user
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /user/addidea/:
    post:
      tags:
      - user
      description: create new Ideas
      operationId: UserController.AddIdea
      parameters:
      - in: body
        name: body
        description: body to add new Business Idea
        required: true
        schema:
          $ref: '#/definitions/models.APIData'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.ResponsePackage'
        "403":
          description: body is empty
  /user/login:
    get:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: query
        name: username
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/logout:
    get:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
definitions:
  gorm.Model:
    title: Model
    type: object
  models.APIData:
    title: APIData
    type: object
    properties:
      body:
        $ref: '#/definitions/models.User'
      user:
        $ref: '#/definitions/models.User'
  models.Object:
    title: Object
    type: object
    properties:
      ObjectID:
        type: string
      PlayerName:
        type: string
      Score:
        type: integer
        format: int64
  models.ResponseBody:
    title: ResponseBody
    type: object
    properties:
      roles:
        type: array
        items:
          $ref: '#/definitions/models.Roles'
      user:
        $ref: '#/definitions/models.User'
  models.ResponseObject:
    title: ResponseObject
    type: object
    properties:
      role:
        $ref: '#/definitions/models.Roles'
      user:
        $ref: '#/definitions/models.User'
  models.ResponsePackage:
    title: ResponsePackage
    type: object
    properties:
      body:
        $ref: '#/definitions/models.ResponseBody'
      code:
        type: integer
        format: int64
      status:
        type: string
  models.Roles:
    title: Roles
    type: object
    properties:
      code:
        type: integer
        format: int64
      role:
        type: string
      user_id:
        type: integer
        format: int32
      user_name:
        type: string
  models.User:
    title: User
    type: object
    properties:
      city:
        type: string
      country:
        type: string
      dob:
        type: string
      email:
        type: string
      full_name:
        type: string
      gender:
        type: string
      password:
        type: string
      role:
        type: integer
        format: int64
      street:
        type: string
      username:
        type: string
tags:
- name: object
  description: |
    Operations about object
- name: user
  description: |
    UserController handles all operations about Users
- name: admin
  description: |
    AdminController handles admin controller
- name: industry
  description: |
    IndustryController handles admin controller
